;; debug.asm - Enable/Disable debug-mode
;;
;; This uses the custom BIOS function we've added to the BIOS, which was never
;; present in real CP/M.  Consider it a hook into the emulator.
;;
;; Debug mode, once enabled, shows a summary of syscalls made and their
;; results.  It is best to use the logfile, but this can be enabled/disabled
;; at runtime which makes it nicer.
;;

BDOS_ENTRY_POINT:     EQU 5
BDOS_OUTPUT_STRING:   EQU 9
CMDLINE:              EQU 0x80   ; default DMA area too

        ;;
        ;; CP/M programs start at 0x100.
        ;;
        ORG 100H


        ;; Copy the DMA area, which holds our command-line
        ;; flags, to a safe area at the foot of our binary.
        ;;
        LD HL, CMDLINE
        LD DE, DEST
        LD BC, 128
        LDIR

        ;;
        ;; Now we can test if we're running under cpmulator
        ;; which will trash the DMA area
        ;;
        call exit_if_not_cpmulator

        ;;
        ;; If we didn't get an argument then show the current value
        ;;
        LD      HL,DEST
        LD      A,(HL)
        INC     HL
        CP      0x00
        jr z, show_value

        ;; OK we're running under cpmulator, and we did get a parameter:
        ;;
        ;;  DEST+0 contains the length of the command-line.  i.e. pascal-string
        ;;  DEST+1 contains " "
        ;;  DEST+2 contains the argument, assuming no extra space.
        ;;
        ;; Read the first digit of the parameter, only, and use it.
        ;;
        ld A,(DEST+2)
        cp '1'
        jr z, set_debug
        cp '0'
        jr z, unset_debug

        jr unknown_argument


set_debug:
        ld c, 0x01
        jr set_debug_middle

unset_debug:
        ld  c, 0x00
set_debug_middle:
        ld HL, 0x06
        ld  a, 31
        out (0xff), a

        ;; fall-through to show the value

;; get the value of the flag
show_value:
        ld  c, 0xff
        ld HL, 0x06
        ld  a, 31
        out (0xff), a

        ld a,c
        cp 0x00
        jr z,show_debug_off
        cp 0x01
        jr z, show_debug_on

        ;; unknown value
        LD DE, MODE_UNKNOWN
        LD C, BDOS_OUTPUT_STRING
        call BDOS_ENTRY_POINT

        ;; fall-through

        ;; Exit
exit:
        RST 0x00

show_debug_off:
        LD DE, MODE_OFF
        LD C, BDOS_OUTPUT_STRING
        call BDOS_ENTRY_POINT
        jr exit

show_debug_on:
        LD DE, MODE_ON
        LD C, BDOS_OUTPUT_STRING
        call BDOS_ENTRY_POINT
        jr exit

;;
;; Error Routines
;;
unknown_argument:
        LD DE, WRONG_ARGUMENT
        LD C, BDOS_OUTPUT_STRING
        call BDOS_ENTRY_POINT
        jr exit

;;
;; Text output strings.
;;
WRONG_ARGUMENT:
        db "Usage: DEBUG [0|1]", 0x0a, 0x0d, "$"
MODE_ON:
        db "debug mode is on.", 0x0a, 0x0d, "$"
MODE_OFF:
        db "debug mode is off.", 0x0a, 0x0d, "$"
MODE_UNKNOWN:
        db "Failed to determine the state of debug mode.", 0x0a, 0x0d, "$"

include "common.inc"

DEST:
END
